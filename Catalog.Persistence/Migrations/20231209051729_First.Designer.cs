// <auto-generated />
using Catalog.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.Persistence.Migrations;

[DbContext(typeof(CatalogDbContext))]
[Migration("20231209051729_First")]
public partial class First
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.0")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.BrandAggregate.Brand", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("int");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("Brands");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.CategoryAggregate.Category", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.ProductAggregate.Product", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("int");

                b.Property<int>("BrandId")
                    .HasColumnType("int");

                b.Property<int>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("ProductImage")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("SellerId")
                    .HasColumnType("int");

                b.Property<string>("Sku")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("BrandId");

                b.HasIndex("CategoryId");

                b.HasIndex("SellerId");

                b.ToTable("Products");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.SellerAggregate.Seller", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("int");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SellerName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("Sellers");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.ProductAggregate.Product", b =>
            {
                b.HasOne("Catalog.Domain.AggregatesModel.BrandAggregate.Brand", "Brand")
                    .WithMany("Products")
                    .HasForeignKey("BrandId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Catalog.Domain.AggregatesModel.CategoryAggregate.Category", "Category")
                    .WithMany("Products")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Catalog.Domain.AggregatesModel.SellerAggregate.Seller", "Seller")
                    .WithMany("Products")
                    .HasForeignKey("SellerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.OwnsOne("Catalog.Domain.AggregatesModel.Common.ValueObjects.Money", "Price", b1 =>
                    {
                        b1.Property<int>("ProductId")
                            .HasColumnType("int");

                        b1.Property<decimal>("Amount")
                            .HasColumnType("decimal(18,2)");

                        b1.Property<string>("Currency")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)");

                        b1.HasKey("ProductId");

                        b1.ToTable("Products");

                        b1.WithOwner()
                            .HasForeignKey("ProductId");
                    });

                b.Navigation("Brand");

                b.Navigation("Category");

                b.Navigation("Price")
                    .IsRequired();

                b.Navigation("Seller");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.BrandAggregate.Brand", b =>
            {
                b.Navigation("Products");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.CategoryAggregate.Category", b =>
            {
                b.Navigation("Products");
            });

        modelBuilder.Entity("Catalog.Domain.AggregatesModel.SellerAggregate.Seller", b =>
            {
                b.Navigation("Products");
            });
#pragma warning restore 612, 618
    }
}
